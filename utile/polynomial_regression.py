import numpy as np
from sklearn.metrics import mean_squared_error, r2_score

class PolynomialRegression:
    """G√®re une r√©gression polynomiale pour un ordre donn√© et retourne les m√©triques associ√©es."""

    def __init__(self, df, x_col, y_col):
        self.df = df
        self.x_col = x_col
        self.y_col = y_col
        self.X = df[x_col].values
        self.Y = df[y_col].values

    def fit(self, degree):
        """Ajuste un polyn√¥me d'ordre `degree`, g√©n√®re les interpolations et retourne les m√©triques."""

        # üìå Normalisation pour √©viter les erreurs num√©riques
        X_mean = np.mean(self.X)
        X_std = np.std(self.X)
        X_norm = (self.X - X_mean) / X_std

        # Ajustement du polyn√¥me sur les X normalis√©s
        coeffs = np.polyfit(X_norm, self.Y, degree)
        poly_eq = np.poly1d(coeffs)

        # Pr√©diction sur les X normalis√©s
        Y_pred = poly_eq(X_norm)

        # G√©n√©ration des interpolations
        X_interp = np.linspace(min(self.X), max(self.X), 200)  # ‚úÖ 200 points pour affichage
        X_interp_norm = (X_interp - X_mean) / X_std  # ‚úÖ Normalisation des nouveaux points
        Y_interp = poly_eq(X_interp_norm)  # ‚úÖ Calcul des Y correspondants

        # Calcul des m√©triques
        mse = mean_squared_error(self.Y, Y_pred)
        r2 = r2_score(self.Y, Y_pred)

        return {
            "degree": degree,
            "coefficients": coeffs,
            "r2_score": r2,
            "mse": mse,
            "poly_eq": lambda x: poly_eq((x - X_mean) / X_std),  # Ajustement de l'√©chelle
            "X_interp": X_interp,  # ‚úÖ Correction : Assure 200 valeurs
            "Y_interp": Y_interp  # ‚úÖ Correction : Assure 200 valeurs aussi
        }
